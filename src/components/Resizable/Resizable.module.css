.root {
	isolation: isolate;
}

.item {
	--rs-resizable-default-size: none;
	--rs-resizable-min-size: 0;
	--rs-resizable-max-size: 100%;

	overflow: hidden;
	min-width: var(--rs-resizable-default-size);
	max-width: var(--rs-resizable-default-size);
	flex-grow: 100;
}

.handle {
	flex-shrink: 0;
	position: relative;
	z-index: var(--rs-z-index-raised);

	&::before,
	&::after {
		content: "";
		position: absolute;
		border-radius: 999px;
	}

	&::after {
		transition: var(--rs-duration-fast) var(--rs-easing-standard);
		transition-property: opacity, background-color;
	}
}

.--variant-bordered .handle {
	&::after {
		background: var(--rs-color-border-neutral-faded);
	}

	[data-rs-keyboard] &:focus::after,
	&:hover::after,
	&--dragging::after {
		background: var(--rs-color-border-neutral);
	}
}

.--variant-borderless .handle {
	&::after {
		opacity: 0;
		background: var(--rs-color-border-neutral);
	}

	[data-rs-keyboard] &:focus::after,
	&:hover::after,
	&--dragging::after {
		opacity: 0.6;
	}
}

/* Prevent handle hover in case any other handle is already active */
body:has(.handle--dragging) .--variant-borderless .handle:not(.handle--dragging) {
	opacity: 0;
}

body:has(.handle--dragging) .--variant-bordered .handle:not(.handle--dragging)::after {
	background: var(--rs-color-border-neutral-faded);
}

/* Keep drag cursor anywhere while dragging */
body:has(.--direction-row > .handle--dragging) {
	cursor: ew-resize;
}

body:has(.--direction-column > .handle--dragging) {
	cursor: ns-resize;
}

.--direction {
	&-row > .handle {
		cursor: ew-resize;

		&::before,
		&::after {
			inset-block: 0;
			inset-inline-start: 50%;
			transform: translateX(-50%);
		}

		&::before {
			width: var(--rs-unit-x6);
		}

		.--variant-borderless&::after {
			width: var(--rs-unit-x1);
		}

		.--variant-bordered&::after {
			width: 1px;
		}
	}

	&-row > .item[data-rs-resizable-item-mounted] {
		min-width: var(--rs-resizable-min-size);
		max-width: var(--rs-resizable-max-size);
	}

	&-column > .handle {
		cursor: ns-resize;

		&::before,
		&::after {
			inset-inline: 0;
			inset-block-start: 50%;
			transform: translateY(-50%);
		}

		&::before {
			height: var(--rs-unit-x6);
		}

		.--variant-borderless&::after {
			height: var(--rs-unit-x1);
		}

		.--variant-bordered&::after {
			height: 1px;
		}
	}

	&-column > .item[data-rs-resizable-item-mounted] {
		min-height: var(--rs-resizable-min-size);
		max-height: var(--rs-resizable-max-size);
	}
}
