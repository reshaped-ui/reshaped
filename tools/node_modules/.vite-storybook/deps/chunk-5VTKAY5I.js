import {
  require_array_iteration
} from "./chunk-XVLZZE2S.js";
import {
  require_is_array,
  require_object_create,
  require_object_keys,
  require_to_object
} from "./chunk-U6VEKS2Y.js";
import {
  require_an_object,
  require_classof_raw,
  require_copy_constructor_properties,
  require_create_non_enumerable_property,
  require_create_property_descriptor,
  require_descriptors,
  require_export,
  require_fails,
  require_get_built_in,
  require_global,
  require_has,
  require_hidden_keys,
  require_internal_state,
  require_is_object,
  require_is_pure,
  require_native_symbol,
  require_object_define_property,
  require_object_get_own_property_descriptor,
  require_object_get_own_property_names,
  require_object_get_own_property_symbols,
  require_object_property_is_enumerable,
  require_path,
  require_redefine,
  require_set_to_string_tag,
  require_shared,
  require_shared_key,
  require_to_indexed_object,
  require_to_primitive,
  require_uid,
  require_use_symbol_as_uid,
  require_well_known_symbol
} from "./chunk-WW24V2L5.js";
import {
  __commonJS,
  __esm
} from "./chunk-ACCAMVX6.js";

// ../../node_modules/core-js/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "../../node_modules/core-js/internals/object-get-own-property-names-external.js"(exports, module) {
    var toIndexedObject2 = require_to_indexed_object();
    var nativeGetOwnPropertyNames2 = require_object_get_own_property_names().f;
    var toString = {}.toString;
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return nativeGetOwnPropertyNames2(it);
      } catch (error) {
        return windowNames.slice();
      }
    };
    module.exports.f = function getOwnPropertyNames2(it) {
      return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : nativeGetOwnPropertyNames2(toIndexedObject2(it));
    };
  }
});

// ../../node_modules/core-js/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS({
  "../../node_modules/core-js/internals/well-known-symbol-wrapped.js"(exports) {
    var wellKnownSymbol2 = require_well_known_symbol();
    exports.f = wellKnownSymbol2;
  }
});

// ../../node_modules/core-js/internals/define-well-known-symbol.js
var require_define_well_known_symbol = __commonJS({
  "../../node_modules/core-js/internals/define-well-known-symbol.js"(exports, module) {
    var path = require_path();
    var has3 = require_has();
    var wrappedWellKnownSymbolModule2 = require_well_known_symbol_wrapped();
    var defineProperty3 = require_object_define_property().f;
    module.exports = function(NAME) {
      var Symbol = path.Symbol || (path.Symbol = {});
      if (!has3(Symbol, NAME))
        defineProperty3(Symbol, NAME, {
          value: wrappedWellKnownSymbolModule2.f(NAME)
        });
    };
  }
});

// ../../node_modules/core-js/modules/es.symbol.js
var $, global, getBuiltIn, IS_PURE, DESCRIPTORS, NATIVE_SYMBOL, USE_SYMBOL_AS_UID, fails, has, isArray, isObject, anObject, toObject, toIndexedObject, toPrimitive, createPropertyDescriptor, nativeObjectCreate, objectKeys, getOwnPropertyNamesModule, getOwnPropertyNamesExternal, getOwnPropertySymbolsModule, getOwnPropertyDescriptorModule, definePropertyModule, propertyIsEnumerableModule, createNonEnumerableProperty, redefine, shared, sharedKey, hiddenKeys, uid, wellKnownSymbol, wrappedWellKnownSymbolModule, defineWellKnownSymbol, setToStringTag, InternalStateModule, $forEach, HIDDEN, SYMBOL, PROTOTYPE, TO_PRIMITIVE, setInternalState, getInternalState, ObjectPrototype, $Symbol, $stringify, nativeGetOwnPropertyDescriptor, nativeDefineProperty, nativeGetOwnPropertyNames, nativePropertyIsEnumerable, AllSymbols, ObjectPrototypeSymbols, StringToSymbolRegistry, SymbolToStringRegistry, WellKnownSymbolsStore, QObject, USE_SETTER, setSymbolDescriptor, wrap, isSymbol, $defineProperty, $defineProperties, $create, $propertyIsEnumerable, $getOwnPropertyDescriptor, $getOwnPropertyNames, $getOwnPropertySymbols, FORCED_JSON_STRINGIFY;
var init_es_symbol = __esm({
  "../../node_modules/core-js/modules/es.symbol.js"() {
    "use strict";
    $ = require_export();
    global = require_global();
    getBuiltIn = require_get_built_in();
    IS_PURE = require_is_pure();
    DESCRIPTORS = require_descriptors();
    NATIVE_SYMBOL = require_native_symbol();
    USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    fails = require_fails();
    has = require_has();
    isArray = require_is_array();
    isObject = require_is_object();
    anObject = require_an_object();
    toObject = require_to_object();
    toIndexedObject = require_to_indexed_object();
    toPrimitive = require_to_primitive();
    createPropertyDescriptor = require_create_property_descriptor();
    nativeObjectCreate = require_object_create();
    objectKeys = require_object_keys();
    getOwnPropertyNamesModule = require_object_get_own_property_names();
    getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
    getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    definePropertyModule = require_object_define_property();
    propertyIsEnumerableModule = require_object_property_is_enumerable();
    createNonEnumerableProperty = require_create_non_enumerable_property();
    redefine = require_redefine();
    shared = require_shared();
    sharedKey = require_shared_key();
    hiddenKeys = require_hidden_keys();
    uid = require_uid();
    wellKnownSymbol = require_well_known_symbol();
    wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    defineWellKnownSymbol = require_define_well_known_symbol();
    setToStringTag = require_set_to_string_tag();
    InternalStateModule = require_internal_state();
    $forEach = require_array_iteration().forEach;
    HIDDEN = sharedKey("hidden");
    SYMBOL = "Symbol";
    PROTOTYPE = "prototype";
    TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    setInternalState = InternalStateModule.set;
    getInternalState = InternalStateModule.getterFor(SYMBOL);
    ObjectPrototype = Object[PROTOTYPE];
    $Symbol = global.Symbol;
    $stringify = getBuiltIn("JSON", "stringify");
    nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    nativeDefineProperty = definePropertyModule.f;
    nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    AllSymbols = shared("symbols");
    ObjectPrototypeSymbols = shared("op-symbols");
    StringToSymbolRegistry = shared("string-to-symbol-registry");
    SymbolToStringRegistry = shared("symbol-to-string-registry");
    WellKnownSymbolsStore = shared("wks");
    QObject = global.QObject;
    USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    setSymbolDescriptor = DESCRIPTORS && fails(function() {
      return nativeObjectCreate(nativeDefineProperty({}, "a", {
        get: function() {
          return nativeDefineProperty(this, "a", { value: 7 }).a;
        }
      })).a != 7;
    }) ? function(O, P, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
      if (ObjectPrototypeDescriptor)
        delete ObjectPrototype[P];
      nativeDefineProperty(O, P, Attributes);
      if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;
    wrap = function(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
      setInternalState(symbol, {
        type: SYMBOL,
        tag,
        description
      });
      if (!DESCRIPTORS)
        symbol.description = description;
      return symbol;
    };
    isSymbol = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      return Object(it) instanceof $Symbol;
    };
    $defineProperty = function defineProperty(O, P, Attributes) {
      if (O === ObjectPrototype)
        $defineProperty(ObjectPrototypeSymbols, P, Attributes);
      anObject(O);
      var key = toPrimitive(P, true);
      anObject(Attributes);
      if (has(AllSymbols, key)) {
        if (!Attributes.enumerable) {
          if (!has(O, HIDDEN))
            nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
          O[HIDDEN][key] = true;
        } else {
          if (has(O, HIDDEN) && O[HIDDEN][key])
            O[HIDDEN][key] = false;
          Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
        }
        return setSymbolDescriptor(O, key, Attributes);
      }
      return nativeDefineProperty(O, key, Attributes);
    };
    $defineProperties = function defineProperties(O, Properties) {
      anObject(O);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function(key) {
        if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
          $defineProperty(O, key, properties[key]);
      });
      return O;
    };
    $create = function create(O, Properties) {
      return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };
    $propertyIsEnumerable = function propertyIsEnumerable(V) {
      var P = toPrimitive(V, true);
      var enumerable = nativePropertyIsEnumerable.call(this, P);
      if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P))
        return false;
      return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
      var it = toIndexedObject(O);
      var key = toPrimitive(P, true);
      if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key))
        return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key);
      if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
        descriptor.enumerable = true;
      }
      return descriptor;
    };
    $getOwnPropertyNames = function getOwnPropertyNames(O) {
      var names = nativeGetOwnPropertyNames(toIndexedObject(O));
      var result = [];
      $forEach(names, function(key) {
        if (!has(AllSymbols, key) && !has(hiddenKeys, key))
          result.push(key);
      });
      return result;
    };
    $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
      var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
      var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
      var result = [];
      $forEach(names, function(key) {
        if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
          result.push(AllSymbols[key]);
        }
      });
      return result;
    };
    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol)
          throw TypeError("Symbol is not a constructor");
        var description = !arguments.length || arguments[0] === void 0 ? void 0 : String(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
          if (this === ObjectPrototype)
            setter.call(ObjectPrototypeSymbols, value);
          if (has(this, HIDDEN) && has(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER)
          setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
        return wrap(tag, description);
      };
      redefine($Symbol[PROTOTYPE], "toString", function toString() {
        return getInternalState(this).tag;
      });
      redefine($Symbol, "withoutSetter", function(description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
      wrappedWellKnownSymbolModule.f = function(name) {
        return wrap(wellKnownSymbol(name), name);
      };
      if (DESCRIPTORS) {
        nativeDefineProperty($Symbol[PROTOTYPE], "description", {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });
        if (!IS_PURE) {
          redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
        }
      }
    }
    $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
      defineWellKnownSymbol(name);
    });
    $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
      "for": function(key) {
        var string = String(key);
        if (has(StringToSymbolRegistry, string))
          return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      },
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym))
          throw TypeError(sym + " is not a symbol");
        if (has(SymbolToStringRegistry, sym))
          return SymbolToStringRegistry[sym];
      },
      useSetter: function() {
        USE_SETTER = true;
      },
      useSimple: function() {
        USE_SETTER = false;
      }
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
      getOwnPropertyNames: $getOwnPropertyNames,
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    $({ target: "Object", stat: true, forced: fails(function() {
      getOwnPropertySymbolsModule.f(1);
    }) }, {
      getOwnPropertySymbols: function getOwnPropertySymbols2(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
      }
    });
    if ($stringify) {
      FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
        var symbol = $Symbol();
        return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
      });
      $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
        stringify: function stringify(it, replacer, space) {
          var args = [it];
          var index = 1;
          var $replacer;
          while (arguments.length > index)
            args.push(arguments[index++]);
          $replacer = replacer;
          if (!isObject(replacer) && it === void 0 || isSymbol(it))
            return;
          if (!isArray(replacer))
            replacer = function(key, value) {
              if (typeof $replacer == "function")
                value = $replacer.call(this, key, value);
              if (!isSymbol(value))
                return value;
            };
          args[1] = replacer;
          return $stringify.apply(null, args);
        }
      });
    }
    if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
      createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    }
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
  }
});

// ../../node_modules/core-js/modules/es.symbol.description.js
var $2, DESCRIPTORS2, global2, has2, isObject2, defineProperty2, copyConstructorProperties, NativeSymbol, EmptyStringDescriptionStore, SymbolWrapper, symbolPrototype, symbolToString, native, regexp;
var init_es_symbol_description = __esm({
  "../../node_modules/core-js/modules/es.symbol.description.js"() {
    "use strict";
    $2 = require_export();
    DESCRIPTORS2 = require_descriptors();
    global2 = require_global();
    has2 = require_has();
    isObject2 = require_is_object();
    defineProperty2 = require_object_define_property().f;
    copyConstructorProperties = require_copy_constructor_properties();
    NativeSymbol = global2.Symbol;
    if (DESCRIPTORS2 && typeof NativeSymbol == "function" && (!("description" in NativeSymbol.prototype) || NativeSymbol().description !== void 0)) {
      EmptyStringDescriptionStore = {};
      SymbolWrapper = function Symbol() {
        var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]);
        var result = this instanceof SymbolWrapper ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
        if (description === "")
          EmptyStringDescriptionStore[result] = true;
        return result;
      };
      copyConstructorProperties(SymbolWrapper, NativeSymbol);
      symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
      symbolPrototype.constructor = SymbolWrapper;
      symbolToString = symbolPrototype.toString;
      native = String(NativeSymbol("test")) == "Symbol(test)";
      regexp = /^Symbol\((.*)\)[^)]+$/;
      defineProperty2(symbolPrototype, "description", {
        configurable: true,
        get: function description() {
          var symbol = isObject2(this) ? this.valueOf() : this;
          var string = symbolToString.call(symbol);
          if (has2(EmptyStringDescriptionStore, symbol))
            return "";
          var desc = native ? string.slice(7, -1) : string.replace(regexp, "$1");
          return desc === "" ? void 0 : desc;
        }
      });
      $2({ global: true, forced: true }, {
        Symbol: SymbolWrapper
      });
    }
  }
});

// ../../node_modules/core-js/modules/es.symbol.iterator.js
var defineWellKnownSymbol2;
var init_es_symbol_iterator = __esm({
  "../../node_modules/core-js/modules/es.symbol.iterator.js"() {
    defineWellKnownSymbol2 = require_define_well_known_symbol();
    defineWellKnownSymbol2("iterator");
  }
});

// ../../node_modules/core-js/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "../../node_modules/core-js/internals/is-regexp.js"(exports, module) {
    var isObject3 = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol2 = require_well_known_symbol();
    var MATCH = wellKnownSymbol2("match");
    module.exports = function(it) {
      var isRegExp;
      return isObject3(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
    };
  }
});

// ../../node_modules/core-js/internals/not-a-regexp.js
var require_not_a_regexp = __commonJS({
  "../../node_modules/core-js/internals/not-a-regexp.js"(exports, module) {
    var isRegExp = require_is_regexp();
    module.exports = function(it) {
      if (isRegExp(it)) {
        throw TypeError("The method doesn't accept regular expressions");
      }
      return it;
    };
  }
});

// ../../node_modules/core-js/internals/correct-is-regexp-logic.js
var require_correct_is_regexp_logic = __commonJS({
  "../../node_modules/core-js/internals/correct-is-regexp-logic.js"(exports, module) {
    var wellKnownSymbol2 = require_well_known_symbol();
    var MATCH = wellKnownSymbol2("match");
    module.exports = function(METHOD_NAME) {
      var regexp = /./;
      try {
        "/./"[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return "/./"[METHOD_NAME](regexp);
        } catch (error2) {
        }
      }
      return false;
    };
  }
});

export {
  require_is_regexp,
  require_not_a_regexp,
  require_correct_is_regexp_logic,
  init_es_symbol,
  init_es_symbol_description,
  init_es_symbol_iterator
};
//# sourceMappingURL=chunk-5VTKAY5I.js.map
