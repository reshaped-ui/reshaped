import {
  require_fix_regexp_well_known_symbol_logic,
  require_regexp_exec_abstract
} from "./chunk-4FLQF7IL.js";
import {
  require_inherit_if_required,
  require_object_create
} from "./chunk-U6VEKS2Y.js";
import {
  require_an_object,
  require_classof_raw,
  require_descriptors,
  require_fails,
  require_global,
  require_has,
  require_is_forced,
  require_object_define_property,
  require_object_get_own_property_descriptor,
  require_object_get_own_property_names,
  require_redefine,
  require_require_object_coercible,
  require_to_primitive
} from "./chunk-WW24V2L5.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// ../../node_modules/core-js/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "../../node_modules/core-js/internals/whitespaces.js"(exports, module) {
    module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }
});

// ../../node_modules/core-js/internals/string-trim.js
var require_string_trim = __commonJS({
  "../../node_modules/core-js/internals/string-trim.js"(exports, module) {
    var requireObjectCoercible2 = require_require_object_coercible();
    var whitespaces = require_whitespaces();
    var whitespace = "[" + whitespaces + "]";
    var ltrim = RegExp("^" + whitespace + whitespace + "*");
    var rtrim = RegExp(whitespace + whitespace + "*$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = String(requireObjectCoercible2($this));
        if (TYPE & 1)
          string = string.replace(ltrim, "");
        if (TYPE & 2)
          string = string.replace(rtrim, "");
        return string;
      };
    };
    module.exports = {
      start: createMethod(1),
      end: createMethod(2),
      trim: createMethod(3)
    };
  }
});

// ../../node_modules/core-js/internals/same-value.js
var require_same_value = __commonJS({
  "../../node_modules/core-js/internals/same-value.js"(exports, module) {
    module.exports = Object.is || function is(x, y) {
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
  }
});

// ../../node_modules/core-js/modules/es.number.constructor.js
var DESCRIPTORS = require_descriptors();
var global = require_global();
var isForced = require_is_forced();
var redefine = require_redefine();
var has = require_has();
var classof = require_classof_raw();
var inheritIfRequired = require_inherit_if_required();
var toPrimitive = require_to_primitive();
var fails = require_fails();
var create = require_object_create();
var getOwnPropertyNames = require_object_get_own_property_names().f;
var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
var defineProperty = require_object_define_property().f;
var trim = require_string_trim().trim;
var NUMBER = "Number";
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;
var toNumber = function(argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == "string" && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120)
        return NaN;
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        default:
          return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        if (code < 48 || code > maxCode)
          return NaN;
      }
      return parseInt(digits, radix);
    }
  }
  return +it;
};
if (isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
  NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function() {
      NumberPrototype.valueOf.call(dummy);
    }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","), j = 0; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}
var NumberWrapper;
var keys;
var j;
var key;

// ../../node_modules/core-js/modules/es.string.search.js
var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
var anObject = require_an_object();
var requireObjectCoercible = require_require_object_coercible();
var sameValue = require_same_value();
var regExpExec = require_regexp_exec_abstract();
fixRegExpWellKnownSymbolLogic("search", 1, function(SEARCH, nativeSearch, maybeCallNative) {
  return [
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == void 0 ? void 0 : regexp[SEARCH];
      return searcher !== void 0 ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    function(regexp) {
      var res = maybeCallNative(nativeSearch, regexp, this);
      if (res.done)
        return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0))
        rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex))
        rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

export {
  require_whitespaces,
  require_string_trim
};
//# sourceMappingURL=chunk-P3KOINJL.js.map
