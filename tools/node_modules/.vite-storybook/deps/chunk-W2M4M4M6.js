import {
  require_document_create_element,
  require_engine_is_node,
  require_engine_user_agent,
  require_fails,
  require_function_bind_context,
  require_global,
  require_html
} from "./chunk-WW24V2L5.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// ../../node_modules/core-js/internals/engine-is-ios.js
var require_engine_is_ios = __commonJS({
  "../../node_modules/core-js/internals/engine-is-ios.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
  }
});

// ../../node_modules/core-js/internals/task.js
var require_task = __commonJS({
  "../../node_modules/core-js/internals/task.js"(exports, module) {
    var global = require_global();
    var fails = require_fails();
    var bind = require_function_bind_context();
    var html = require_html();
    var createElement = require_document_create_element();
    var IS_IOS = require_engine_is_ios();
    var IS_NODE = require_engine_is_node();
    var location = global.location;
    var set = global.setImmediate;
    var clear = global.clearImmediate;
    var process = global.process;
    var MessageChannel = global.MessageChannel;
    var Dispatch = global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var defer;
    var channel;
    var port;
    var run = function(id) {
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var runner = function(id) {
      return function() {
        run(id);
      };
    };
    var listener = function(event) {
      run(event.data);
    };
    var post = function(id) {
      global.postMessage(id + "", location.protocol + "//" + location.host);
    };
    if (!set || !clear) {
      set = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while (arguments.length > i)
          args.push(arguments[i++]);
        queue[++counter] = function() {
          (typeof fn == "function" ? fn : Function(fn)).apply(void 0, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id) {
        delete queue[id];
      };
      if (IS_NODE) {
        defer = function(id) {
          process.nextTick(runner(id));
        };
      } else if (Dispatch && Dispatch.now) {
        defer = function(id) {
          Dispatch.now(runner(id));
        };
      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port, 1);
      } else if (global.addEventListener && typeof postMessage == "function" && !global.importScripts && location && location.protocol !== "file:" && !fails(post)) {
        defer = post;
        global.addEventListener("message", listener, false);
      } else if (ONREADYSTATECHANGE in createElement("script")) {
        defer = function(id) {
          html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id);
          };
        };
      } else {
        defer = function(id) {
          setTimeout(runner(id), 0);
        };
      }
    }
    module.exports = {
      set,
      clear
    };
  }
});

export {
  require_engine_is_ios,
  require_task
};
//# sourceMappingURL=chunk-W2M4M4M6.js.map
