import {
  require_object_create
} from "./chunk-U6VEKS2Y.js";
import {
  require_a_function,
  require_an_object,
  require_export,
  require_fails,
  require_get_built_in,
  require_is_object
} from "./chunk-WW24V2L5.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// ../../node_modules/core-js/internals/function-bind.js
var require_function_bind = __commonJS({
  "../../node_modules/core-js/internals/function-bind.js"(exports, module) {
    "use strict";
    var aFunction2 = require_a_function();
    var isObject2 = require_is_object();
    var slice = [].slice;
    var factories = {};
    var construct2 = function(C, argsLength, args) {
      if (!(argsLength in factories)) {
        for (var list = [], i = 0; i < argsLength; i++)
          list[i] = "a[" + i + "]";
        factories[argsLength] = Function("C,a", "return new C(" + list.join(",") + ")");
      }
      return factories[argsLength](C, args);
    };
    module.exports = Function.bind || function bind2(that) {
      var fn = aFunction2(this);
      var partArgs = slice.call(arguments, 1);
      var boundFunction = function bound() {
        var args = partArgs.concat(slice.call(arguments));
        return this instanceof boundFunction ? construct2(fn, args.length, args) : fn.apply(that, args);
      };
      if (isObject2(fn.prototype))
        boundFunction.prototype = fn.prototype;
      return boundFunction;
    };
  }
});

// ../../node_modules/core-js/modules/es.reflect.construct.js
var $ = require_export();
var getBuiltIn = require_get_built_in();
var aFunction = require_a_function();
var anObject = require_an_object();
var isObject = require_is_object();
var create = require_object_create();
var bind = require_function_bind();
var fails = require_fails();
var nativeConstruct = getBuiltIn("Reflect", "construct");
var NEW_TARGET_BUG = fails(function() {
  function F() {
  }
  return !(nativeConstruct(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function() {
  nativeConstruct(function() {
  });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;
$({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG)
      return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
//# sourceMappingURL=chunk-DJKQCZGY.js.map
