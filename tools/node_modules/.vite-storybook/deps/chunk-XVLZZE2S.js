import {
  require_array_species_create,
  require_to_object
} from "./chunk-U6VEKS2Y.js";
import {
  require_function_bind_context,
  require_indexed_object,
  require_to_length
} from "./chunk-WW24V2L5.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// ../../node_modules/core-js/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "../../node_modules/core-js/internals/array-iteration.js"(exports, module) {
    var bind = require_function_bind_context();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var toLength = require_to_length();
    var arraySpeciesCreate = require_array_species_create();
    var push = [].push;
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_OUT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self = IndexedObject(O);
        var boundFunction = bind(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : void 0;
        var value, result;
        for (; length > index; index++)
          if (NO_HOLES || index in self) {
            value = self[index];
            result = boundFunction(value, index, O);
            if (TYPE) {
              if (IS_MAP)
                target[index] = result;
              else if (result)
                switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return value;
                  case 6:
                    return index;
                  case 2:
                    push.call(target, value);
                }
              else
                switch (TYPE) {
                  case 4:
                    return false;
                  case 7:
                    push.call(target, value);
                }
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module.exports = {
      forEach: createMethod(0),
      map: createMethod(1),
      filter: createMethod(2),
      some: createMethod(3),
      every: createMethod(4),
      find: createMethod(5),
      findIndex: createMethod(6),
      filterOut: createMethod(7)
    };
  }
});

export {
  require_array_iteration
};
//# sourceMappingURL=chunk-XVLZZE2S.js.map
